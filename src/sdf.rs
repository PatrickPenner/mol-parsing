use std::collections::{BTreeMap, BTreeSet};

#[derive(Parser)]
#[grammar = "src/grammar/ctfile.pest"]
pub struct SdfParser;

impl serde::Serialize for Rule {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        let rule_string = match self {
            Rule::sdfile => "sdfile",
            Rule::sdfrecord => "sdfile",
            Rule::molfile => "molfile",
            Rule::header => "header",
            Rule::molecule_name => "molecule_name",
            Rule::not_newline => "not_newline",
            Rule::meta_data_root => "meta_data_root",
            Rule::meta_data_depth_1 => "meta_data_depth_1",
            Rule::meta_data_depth_2 => "meta_data_depth_2",
            Rule::meta_data_depth_3 => "meta_data_depth_3",
            Rule::meta_data_depth_4 => "meta_data_depth_4",
            Rule::meta_data_depth_5 => "meta_data_depth_5",
            Rule::meta_data_depth_6 => "meta_data_depth_6",
            Rule::meta_data_depth_7 => "meta_data_depth_7",
            Rule::user_initials => "user_initials",
            Rule::program_name => "program_name",
            Rule::date_time => "date_time",
            Rule::dimensional_codes => "dimensional_codes",
            Rule::major_scaling => "major_scaling",
            Rule::minor_scaling => "minor_scaling",
            Rule::energy => "energy",
            Rule::registry_number => "registry_number",
            Rule::free_meta_data => "free_meta_data",
            Rule::comment_line => "comment_line",
            Rule::connection_table => "connection_table",
            Rule::counts_line => "counts_line",
            Rule::atom_count => "atom_count",
            Rule::count => "count",
            Rule::bond_count => "bond_count",
            Rule::atom_lists_count => "atom_lists_count",
            Rule::chiral_flag => "chiral_flag",
            Rule::version => "version",
            Rule::atom_line => "atom_line",
            Rule::atom_line_depth_1 => "atom_line_depth_1",
            Rule::atom_line_depth_2 => "atom_line_depth_2",
            Rule::atom_line_depth_3 => "atom_line_depth_3",
            Rule::coordinate => "coordinate",
            Rule::atom_symbol => "atom_symbol",
            Rule::mass_difference => "mass_difference",
            Rule::charge => "charge",
            Rule::atom_stereo_parity => "atom_stereo_parity",
            Rule::hydrogen_count => "hydrogen_count",
            Rule::stereo_care_box => "stereo_care_box",
            Rule::valence => "valence",
            Rule::no_hydrogen_designator => "no_hydrogen_designator",
            Rule::atom_atom_mapping => "atom_atom_mapping",
            Rule::inversion_retention_flag => "inversion_retention_flag",
            Rule::exact_change_flag => "exact_change_flag",
            Rule::bond_line => "bond_line",
            Rule::bond_line_depth_1 => "bond_line_depth_1",
            Rule::bond_line_depth_2 => "bond_line_depth_2",
            Rule::first_atom => "first_atom",
            Rule::second_atom => "second_atom",
            Rule::bond_type => "bond_type",
            Rule::bond_stereo => "bond_stereo",
            Rule::bond_topology => "bond_topology",
            Rule::reacting_center_status => "reacting_center_status",
            Rule::property_block => "property_block",
            Rule::property => "property",
            Rule::property_block_end => "property_block_end",
            Rule::atom_alias => "atom_alias",
            Rule::atom_id => "atom_id",
            Rule::alias_text => "alias_text",
            Rule::data_block => "data_block",
            Rule::data_item => "data_item",
            Rule::data_header => "data_header",
            Rule::data_line => "data_line",
            Rule::data_block_end => "data_block_end",
        };
        serializer.serialize_str(rule_string)
    }
}

pub fn get_feature_value_map() -> BTreeMap<Rule, BTreeSet<String>> {
    BTreeMap::from([
        (Rule::user_initials, BTreeSet::<String>::new()),
        (Rule::program_name, BTreeSet::<String>::new()),
        (Rule::comment_line, BTreeSet::<String>::new()),
        (Rule::dimensional_codes, BTreeSet::<String>::new()),
        (Rule::free_meta_data, BTreeSet::<String>::new()),
        (Rule::comment_line, BTreeSet::<String>::new()),
        (Rule::atom_lists_count, BTreeSet::<String>::new()),
        (Rule::version, BTreeSet::<String>::new()),
        (Rule::chiral_flag, BTreeSet::<String>::new()),
        (Rule::atom_symbol, BTreeSet::<String>::new()),
        (Rule::mass_difference, BTreeSet::<String>::new()),
        (Rule::charge, BTreeSet::<String>::new()),
        (Rule::atom_stereo_parity, BTreeSet::<String>::new()),
        (Rule::hydrogen_count, BTreeSet::<String>::new()),
        (Rule::stereo_care_box, BTreeSet::<String>::new()),
        (Rule::valence, BTreeSet::<String>::new()),
        (Rule::no_hydrogen_designator, BTreeSet::<String>::new()),
        (Rule::atom_atom_mapping, BTreeSet::<String>::new()),
        (Rule::inversion_retention_flag, BTreeSet::<String>::new()),
        (Rule::exact_change_flag, BTreeSet::<String>::new()),
        (Rule::bond_type, BTreeSet::<String>::new()),
        (Rule::bond_stereo, BTreeSet::<String>::new()),
        (Rule::bond_topology, BTreeSet::<String>::new()),
        (Rule::reacting_center_status, BTreeSet::<String>::new()),
        (Rule::property, BTreeSet::<String>::new()),
        (Rule::data_header, BTreeSet::<String>::new()),
    ])
}
